#
# aliases
#
alias editprofile='"cursor" --wait -w ~/.profile; . ~/.profile'
alias o='open .'
alias n='npm'
alias s='cursor .'
alias m='cursor .'
alias c='cursor .'
alias bj='bundle install -j8'
alias difflast='git diff HEAD^ HEAD > ~/Desktop/diff.diff'
alias gdiff='git diff --no-index --color'
alias g='amp git'
alias copy='pbcopy'
alias paste='pbpaste'
alias todos='git grep -in todo'
alias prettyjson='paste | json | copy'
alias uglyjs='paste | uglifyjs - | copy'
alias prettycss='paste | css-beautify -f - | copy'
alias sl='ls -p'
alias ls='ls -p'
alias logs='heroku logs -n 10000 --tail'
alias k='kubectl'

# Autocomplete for 'g' alias as well
# complete -o default -o nospace -F git g

# for fast multiple terminal navigation to same dir
alias mark='pwd | pbcopy'
alias goo='cd `pbpaste`'
alias ql='qlmanage -p 2>/dev/null' # quicklook via terminal

umask 002 # prevent permissions problems
export JOBS=4 # for faster node building
export HISTCONTROL=ignoredups
export HISTSIZE=10000000
export HISTFILESIZE=10000000
export EDITOR='cursor -w'
export PAGER="less"
export CLICOLOR="yes"
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
export PROMPT_COLOR='1;1;40m'
# default prompt
# export PS1="\h:\W \u\$ "
parse_git_branch() {
  $(which git) branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

# ~/dev/dotfiles(my-branch-name)ยง
# for bash only
# export PS1="\w\[\e[0;33;49m\]\$(parse_git_branch)\[\e[0;0m\]\[\e[0;32m\]ยง\[\e[0m\] "

# ~/dev/dotfiles(my-branch-name)ยง
setopt PROMPT_SUBST
export PS1="%~%F{yellow}\$(parse_git_branch)%F{green}ยง%f "

# for bash only
# shopt -s checkwinsize cdspell

# for convenience of not typing branch names 24/7
gb() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

# thanks @kurisuchan and david reiman for writing what this is based on.
github_repository_url() {
  git remote -v | awk '{ print $2 }' | sed 's/\.git//' | head -n 1
}
ghe() {
  if [[ $(gb) == "main" || $(gb) == "master" ]]; then
    open "$(github_repository_url)"
  else
    # open the repo page
    open "$(github_repository_url)/pull/$(gb)"
  fi
}

function prstable() { # by David Trejo
  # same as gh but without the "open"
  githubUrl=$(git remote -v | grep hub | grep fetch | awk '{print $2}' | sed 's/git@/http:\/\//' | sed 's/com:/com\//' | sed 's/\.git//' | head -n1)
  # same as gb()
  branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
  open "$githubUrl/compare/stable...$branch?expand=1"
}

function prdevelop() { # by David Trejo
  # same as gh but without the "open"
  githubUrl=$(git remote -v | grep hub | grep fetch | awk '{print $2}' | sed 's/git@/http:\/\//' | sed 's/com:/com\//' | sed 's/\.git//' | head -n1)
  # same as gb()
  branch=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
  open "$githubUrl/compare/develop...$branch?expand=1"
}

# rm does move to trash
# via http://blog.vicshih.com/2008/04/move-to-trash-from-mac-command-line.html
function del() {
  while [ -n "$1" ]; do
    if [ ! -e "$1" ]; then
      echo "'$1' not found; exiting"
      return
    fi

    local file=$(basename -- "$1")

    # Chop trailing '/' if there
    file=${file%/}

    local destination=''

    if [ -e "$HOME/.Trash/$file" ]; then
      # Extract file and extension
      local ext=$(expr "$file" : ".*\(\.[^\.]*\)$")
      local base=${file%$ext}

      # Add a space between base and timestamp
      test -n "$base" && base="$base "

      destination="/$base$(date +%H-%M-%S)_$RANDOM$ext"
    fi

    echo "Moving '$1' to '$HOME/.Trash$destination'"
    \mv -i -- "$1" "$HOME/.Trash$destination" || return
    shift
  done
}
alias rm='del'

alias pr='post-review'
alias pgstart='postgres -D /usr/local/var/postgres'
export MAVEN_OPTS="-server -Xms256m -Xmx512m"
alias zk='/Users/david/zookeeper-3.4.3/bin/zkServer.sh'
export DEV_DIR="$HOME/dev"
function d() {
  cd "$DEV_DIR"/"$1"
}
export REPOS_DIR="$HOME/repos"
function r() {
  cd "$REPOS_DIR"/"$1"
}
alias class='cd ~/Dropbox/classes'
alias desktop='$HOME/Desktop'
alias ..='cd ..'
alias ...='cd ../../'

# raise the number of files a process is allowed to have open.
ulimit -S -n 5000

#
# pull in private things or things only applicable to this machine
#
source $HOME/.private

# add git extensions/scripts to path
export PATH=$PATH:$HOME/bin
# add mactex scripts
export PATH=$PATH:/usr/texbin

# fix problem with tmux
export TERM=xterm-color


# makes it easy to find the main js file for any node package:
# nresolve mypackage
nresolve () {
  node -p 'require.resolve("'$1'")'
}

#
# amp aliases! YEEE
#
#

# give me variable saving!
alias gs='amp -p "...(.*)$" git status -s'
alias gbr='amp -p " ? (?:remotes\\/)?(?:origin\\/)?(.*)$" git branch --sort=-committerdate | head -n 10' # supports -a, -r flags

alias l='CLICOLOR_FORCE=1 amp -p "(.*)" ls -1'
alias find='amp -p "(.*)" find'
alias gdiffstat='amp -p " ((?:\\/[\\w\\.\\-]+)+)" git diff --stat'
alias gdmno='amp -p "(.*)" git diff main... --name-only'

# give me variable expansion!
alias subl='amp cursor'
alias code='amp cursor'
alias cursor='amp cursor'
alias ga='amp git add'
alias gap='amp git add -p'
alias grm='amp git rm'
alias gmv='amp git mv'
alias gco='amp git checkout'
alias gd='amp git diff'
alias gdh='amp git diff --staged'
alias gds='amp git diff --staged'
alias gunstage='amp git unstage'
alias gblame='amp git blame'
alias gup='amp git up' # my rebase helper script, see dtrejo/dotfiles/bin/git-up
alias gf='git fetch'
alias npx='amp npx'
alias x='amp npx'
alias cat='amp cat'
alias less='amp less'

alias gc='git commit'
alias gp='amp git push'
alias gpu='amp git push -u origin `gb`'
alias mocha='amp mocha'
alias phpfix='amp /usr/local/Cellar/php-cs-fixer/2.7.1/php-cs-fixer fix --rules=@PSR2'

# less typing
alias gamend='git amend'
alias gci="git commit"
alias guncommit='git uncommit'

# via https://stackoverflow.com/a/19135644
alias gitbranchauthors="git for-each-ref --format='%(committerdate) %09 %(authorname) %09 %(refname)' | sort -k5n -k2M -k3n -k4n"

# Tired of writing long commands to shell into your docker image?
# Usage:
#   dsh node:latest
#   dsh node:latest --rm
function dsh() {
  local url="$1"
  [[ -z "$url" ]] && echo "Please pass a docker image url." && return 1
  local args="${@:2}"
  local dest="/"$(basename $PWD)
  echo docker run -v $PWD:$dest -w $dest -it --entrypoint '/bin/bash' $args $url
  docker run -v $PWD:$dest -w $dest -it --entrypoint '/bin/bash' $args $url \
    || docker run -v $PWD:$dest -w $dest -it --entrypoint '/bin/sh' $args $url
}

function newbranchcommit() {
  git checkout -b "${$1// /-}" && git commit --allow-empty -m "$1"
}

function signwtf() {
  export NUMBER=$1
  export URL="https://github.com/brianleroux/wtfjs/pull/$NUMBER.patch"
  curl $URL | git am --signoff
}

# Run rspec files edited on this branch or not committed
function spec() {
  files=$(git diff --name-only main..)"\n"$(git diff --name-only)"\n"$(git diff --staged --name-only)
  echo bin/rspec $(echo "$files" | grep "_spec.rb" | uniq | tr '\n' ' ')
       bin/rspec $(echo "$files" | grep "_spec.rb" | uniq | tr '\n' ' ')
}

export GOPATH=$HOME/go
export PATH=$PATH:$GOPATH/bin

alias lock="open /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app"

export NVM_DIR="$HOME/.nvm"
[ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

alias pgstart='pg_ctl -D /usr/local/var/postgres start'
alias pgkill='pg_ctl -D /usr/local/var/postgres stop'

export HOMEBREW_NO_ANALYTICS=1
export PATH=$PATH:"/opt/homebrew/bin"
# output from brew shellenv
export HOMEBREW_PREFIX="/opt/homebrew";
export HOMEBREW_CELLAR="/opt/homebrew/Cellar";
export HOMEBREW_REPOSITORY="/opt/homebrew";
export PATH="/opt/homebrew/bin:/opt/homebrew/sbin${PATH+:$PATH}";
export MANPATH="/opt/homebrew/share/man${MANPATH+:$MANPATH}:";
export INFOPATH="/opt/homebrew/share/info:${INFOPATH:-}";

export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"

export BASH_SILENCE_DEPRECATION_WARNING=1

eval "$(rbenv init -)"

export COMPOSE_BAKE=true
alias dr="docker-compose run --rm "

alias slackletters='ruby -e "puts STDIN.read.strip.chars.map { |c| c.match?(/[[:alpha:]]/) ? \":alphabet-yellow-#{c.downcase}:\" : c }.join"'
