#!/usr/bin/env ruby
# frozen_string_literal: true

require 'json'
require 'open3'
require 'tempfile'

USAGE = %(
What does `draft` do?
Draft sets up a Github draft PR based on the supplied JIRA ticket.

Usage:
  cd your-repo
  draft SEC-1234

  # Or, pass in a URL
  draft https://yourcompany.atlassian.net/browse/SEC-4431

How does it work?
* creates branch named after jira ticket based on latest main
* swaps you to that branch
* creates an empty commit with the JIRA title in it
* pushes the branch to github
* opens a draft PR
* transitions the JIRA ticket to "In Progress", if possible

Feedback? Message David Trejo.
)
HELP = ['-h', '--help'].freeze
DEBUG = ENV['DEBUG']

def main
  if run('which jira').empty?
    puts %(Please install go-jira:
      brew install go-jira
      # Follow instructions:
      # https://github.com/go-jira/jira#quickstart-api-token-and-keychain
    )
    exit 1
  end
  if run('which gh').empty?
    puts %(Please install gh:
      brew install gh
    )
    exit 1
  end
  if run('which pandoc').empty?
    puts %(Please install gh:
      brew install pandoc
    )
    exit 1
  end
  help = ARGV.find { |arg| HELP.include?(arg) }
  if help
    puts USAGE
    return
  end

  create_draft
end

def create_draft
  key = ARGV.map { |arg| arg.match(/\b([A-Z]+-\d+)\b/i).to_s.upcase }.keep_if { |x| x }.first

  unless key
    puts "Sorry, could not find a JIRA key in #{ARGV}"
    exit 1
  end
  debug("key #{key}")

  current_branch = run('git branch --show-current')
  default_branch = run('gh repo view --json defaultBranchRef --jq .defaultBranchRef.name')
  if current_branch != default_branch
    stash = run("git stash push -m autosave-draft-#{Time.now.to_i}") if run('git status -s')
    debug(stash)

    checkout_default = run("git checkout #{default_branch}")
    debug(checkout_default)
  end
  pull = run('git pull --rebase')
  debug(pull)

  issue = parse_issue(run("jira view -t json --expand=renderedFields #{key}"))
  summary = issue.dig(:fields, :summary)
  description_html = issue.dig(:renderedFields, :description).gsub("\n", " ")
  debug(summary, description_html)
  description = nil
  Tempfile.create("html") do |file|
    file.write(description_html)
    file.flush
    description = run("pandoc --from=html --to=gfm-raw_html #{file.path}")
  end
  debug(summary, description)
  description.gsub!(/([^\n ])\n([^\n ])/) { |_match| "#{$1} #{$2}" }
  debug(summary, description)

  # TODO: consider removing stopwords first
  # https://github.com/brenes/stopwords-filter/blob/master/lib/stopwords/snowball/locales/en.csv
  branch_name = "#{key}-#{summary.split(' ')[0..2].map { |w| w.gsub(/[^a-z0-9]/i, '') }.join('-')}"

  create_branch = run("git branch #{branch_name}")
  debug(create_branch)

  checkout = run("git checkout #{branch_name}")
  debug(checkout)

  commit = run('git commit --allow-empty -m', "#{key} #{summary}\n\n#{key}\n#{description}")
  debug(commit)

  push = run("git push -u origin #{branch_name}")
  debug(push)

  [
    ".github/pull_request_template.md", ".github/PULL_REQUEST_TEMPLATE.md"
  ].any? do |pr_template_path|
    next if !File.exist?(pr_template_path)

    Tempfile.create("github_description") do |file|
      pull_request_template = File.read(pr_template_path)
      file.write("#{description}\n\n---\n#{pull_request_template}")
      file.flush

      pr = run("gh pr create -a @me -d -f --body-file #{file.path}")
      debug(pr)
    end
    true
  end

  view = run("gh pr view #{branch_name} --web")
  debug(view)

  transition_to_in_progress = run("jira transition --no-edit #{key} -t 'In Progress'")
  debug(transition_to_in_progress)
end

def parse_issue(output)
  JSON.parse(output, symbolize_names: true)
end

def run(command, *args, log_error: false)
  program, simple_args = command.split(' ', 2)
  output, status = Open3.capture2(program, *simple_args.split(' '), *args)
  out = output.strip
  puts(out) if log_error && status != 0
  out
end

def debug(*args)
  return unless DEBUG

  puts(*args)
end

main
