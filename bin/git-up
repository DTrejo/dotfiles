set -e

# equivalent of:
# remember current branch
# git up BRANCH_TO_UPDATE BRANCH_TO_REBASE_ON
# git stash if needed
# git checkout BRANCH_TO_UPDATE
# git fetch && git rebase BRANCH_TO_REBASE_ON
# diffstat
# go back to current branch
#
# useful for when you want to update a ton of branches to be on top of another
# without spending tons of time doing stashes and branch switching.
#
# For example:
#     git up main # local main is now up to date with origin/main
#     git up myfeature main # local myfeature is now rebased on main.
#
# inspired by `git reup`
# http://nuclearsquid.com/writings/git-tricks-tips-workflows/

# for convenience of not typing branch names 24/7
git_branchname() {
  git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}
trim() { echo $1; }

if [[ $# -lt 1 ]]; then
  echo "must supply exactly one branch to update. Saw $# args."
  exit 1
fi

CUR_BRANCH=$(git_branchname)
BRANCH_TO_UPDATE=$1
BRANCH_TO_REBASE_ON=${2:-origin/$BRANCH_TO_UPDATE}

if [[ $(git stash save "Auto-stash '$0'") == 'No local changes to save' ]]; then
  SHOULD_POP=false
else
  SHOULD_POP=true
fi

#
# the meat of it
#
git checkout $BRANCH_TO_UPDATE

git fetch && git rebase $BRANCH_TO_REBASE_ON

git checkout $CUR_BRANCH

if [[ $SHOULD_POP == true ]]; then
  git stash pop --quiet
fi
